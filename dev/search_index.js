var documenterSearchIndex = {"docs":
[{"location":"references/","page":"References","title":"References","text":"Y. Bazilevs, V. M. Calo, J. A. Cottrell, T. J. Hughes, A. Reali and G. Scovazzi. Variational multiscale residual-based turbulence modeling for large eddy simulation of incompressible flows. Computer Methods in Applied Mechanics and Engineering 197, 173–201 (2007).\n\n\n\n","category":"page"},{"location":"IncompressibleAdjoint/","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint","text":"CurrentModule = IncompressibleAdjoint","category":"page"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint","text":"","category":"section"},{"location":"IncompressibleAdjoint/","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint","text":"Modules = [IncompressibleAdjoint,]","category":"page"},{"location":"IncompressibleAdjoint/#Gridap.ODEs.ODETools.solve_step!-Tuple{AbstractVector, ThetaMethodBackw, Gridap.ODEs.ODETools.AffineODEOperator, AbstractVector, Real, Any}","page":"IncompressibleAdjoint","title":"Gridap.ODEs.ODETools.solve_step!","text":"Gridap.ODEs.ODETools.solve_step!(uf::AbstractVector,\nsolver::ThetaMethodBackw,\nop::AffineODEOperator,\nu0::AbstractVector,\nt0::Real,\ncache)\n\nSupport the new type ThetaMethodBackw which allows integration back in time, useful for unsteady adjoint problems\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.compute_airfoil_coefficients-Tuple{Any, Any, Any, Any, Dict{Symbol, Any}}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.compute_airfoil_coefficients","text":"compute_airfoil_coefficients(uh,ph,nΓ,dΓ,params::Dict{Symbol,Any})\n\nCompute the normaization of airfoil forces, obtaining CD and CL\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.compute_airfoil_forces-Tuple{Any, Any, Any, Any, Dict{Symbol, Any}}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.compute_airfoil_forces","text":"compute_airfoil_forces(uh,ph,nΓ,dΓ,params::Dict{Symbol,Any})\n\nIt computes Drag and Lift over params[:tagname] boundary. It takes into account pressure and velocity gradient. It needs the normals pointings outward respect to the body.\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.compute_drag-NTuple{5, Any}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.compute_drag","text":"compute_drag(uh,ph,nΓ,dΓ,params)\n\nObjective function minimizing the Drag\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.compute_lift-NTuple{5, Any}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.compute_lift","text":"compute_lift(uh,ph,nΓ,dΓ,params)\n\nObjective function, it wants the CL to reach CLtarget. It return CL so it can be monitored.\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.compute_sensitivity-Tuple{Gridap.Geometry.DiscreteModel, Dict{Symbol, Any}, Any, Any, Any, Any}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.compute_sensitivity","text":"compute_sensitivity(model::DiscreteModel, params::Dict{Symbol,Any}, uh0,ph0,ϕu0, ϕp0; objective_function=compute_drag)\n\nFrom the solution of the primal flow uh0 ph0, and the adjoint flow ϕu0 ϕp0 it computes the senstivities according to the objective function. J2 contributions are splitted and the gradients computed individually to avoid numerical cancellation\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.obj_fun-Tuple{Gridap.Geometry.DiscreteModel, Dict{Symbol, Any}, Any, Any, Any}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.obj_fun","text":"obj_fun(model::DiscreteModel, params::Dict{Symbol,Any}, uh,ph, fun)\n\nWrapper that evaluates fun the objective function. fun is a user-defined function. See eg. compute_drag, compute_lift functions. It return fitnessval,E.  fitnessval is the function value that need to be minimized. E is a value that we want to monitor.\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.update_ũ-Tuple{Vector}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.update_ũ","text":"update_ũ(ũ_vec::Vector)\n\nIt extimates the velocity field at the next time step using a Taylor-like expansion based on th previous 4 time steps.\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleAdjoint/#IncompressibleAdjoint.verifykey-Tuple{Dict{Symbol, Any}, Any}","page":"IncompressibleAdjoint","title":"IncompressibleAdjoint.verifykey","text":"verifykey(params::Dict{Symbol,Any},keyname; val = false)\n\nIt check if the dictionary params has the entry keyname. If not it adds the new entry with the value val. It is used to add default values\n\n\n\n\n\n","category":"method"},{"location":"Equations/","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations","text":"CurrentModule = IncompressibleAdjoint.Equations","category":"page"},{"location":"Equations/#IncompressibleAdjoint.Equations","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations","text":"","category":"section"},{"location":"Equations/","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations","text":"Modules = [Equations,]","category":"page"},{"location":"Equations/#IncompressibleAdjoint.Equations.G_params-Tuple{Gridap.Geometry.Triangulation, Any}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.G_params","text":"G_params(Ω::Triangulation, params)\n\nCompute the tensor G and the values GG and gg according to the VMS formulation proposed by [1] \n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.adjoint_conservation-Tuple{Any}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.adjoint_conservation","text":"adjoint_conservation(params)\n\nSteady conservation equations of the adjoint problem \n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.adjoint_steady_SUPG-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.adjoint_steady_SUPG","text":"adjoint_steady_SUPG(params::Dict{Symbol,Any})\n\nIt provides the set of Adjoint Equations Symbol convention: O. Soto, & R. Lohner. (2004). On the Boundary Computation of Flow Sensitivities. https://doi.org/10.2514/6.2004-112 SUPG Stabilization: Srinath, D. N., & Mittal, S. (2010). An adjoint method for shape optimization in unsteady viscous flows. Journal of Computational Physics, 229(6), 1994–2008. https://doi.org/10.1016/j.jcp.2009.11.019\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.adjoint_steady_VMS-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.adjoint_steady_VMS","text":"adjoint_steady_VMS(params::Dict{Symbol,Any})\n\nIt provides the set of Adjoint Equations Symbol convention: O. Soto, & R. Lohner. (2004). On the Boundary Computation of Flow Sensitivities. https://doi.org/10.2514/6.2004-112\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.adjoint_unsteady_SUPG-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.adjoint_unsteady_SUPG","text":"adjoint_unsteady_SUPG(params::Dict{Symbol,Any})\n\nIt provides the set of Adjoint Equations Symbol convention: O. Soto, & R. Lohner. (2004). On the Boundary Computation of Flow Sensitivities. https://doi.org/10.2514/6.2004-112 SUPG Stabilization: Srinath, D. N., & Mittal, S. (2010). An adjoint method for shape optimization in unsteady viscous flows. Journal of Computational Physics, 229(6), 1994–2008. https://doi.org/10.1016/j.jcp.2009.11.019\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.adjoint_unsteady_VMS-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.adjoint_unsteady_VMS","text":"adjoint_unsteady_VMS(params::Dict{Symbol,Any})\n\nIt provides the set of Adjoint Equations Symbol convention: O. Soto, & R. Lohner. (2004). On the Boundary Computation of Flow Sensitivities. https://doi.org/10.2514/6.2004-112 SUPG Stabilization: Srinath, D. N., & Mittal, S. (2010). An adjoint method for shape optimization in unsteady viscous flows. Journal of Computational Physics, 229(6), 1994–2008. https://doi.org/10.1016/j.jcp.2009.11.019\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.compute_G-Tuple{Gridap.Geometry.BodyFittedTriangulation, Any}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.compute_G","text":"compute_G(trian::Gridap.Geometry.BodyFittedTriangulation, params)\n\nCompute G (AbstractArray of TensorValues)\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.compute_GG-Tuple{Gridap.Geometry.BodyFittedTriangulation, Any}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.compute_GG","text":"compute_GG(trian::Gridap.Geometry.BodyFittedTriangulation, params)\n\nCompute GG \n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.compute_d-Tuple{Gridap.Geometry.BodyFittedTriangulation, Any}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.compute_d","text":"compute_d(trian::Gridap.Geometry.BodyFittedTriangulation, params) #trian == Ω\n\nThe inverse of the cell-map-field. It is evaluted in the middle of the refernce domain.\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.compute_gg-Tuple{Gridap.Geometry.BodyFittedTriangulation, Any}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.compute_gg","text":"compute_GG(trian::Gridap.Geometry.BodyFittedTriangulation, params)\n\nCompute gg \n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.direct_differentiation_steady_SUPG-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.direct_differentiation_steady_SUPG","text":"direct_differentiation_SUPG(params::Dict{Symbol,Any})\n\nFormulation from Janssens -P Vandenschrick -K Stevens -G Alessi, B. (n.d.). THE CONTINUOUS ADJOINT APPROACH APPLIED TO THE STABILIZED FINITE-ELEMENT FORMULATION OF THE INCOMPRESSIBLE NAVIER-STOKES EQUATIONS. www.euroturbo.eu\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.direct_differentiation_unsteady_SUPG-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.direct_differentiation_unsteady_SUPG","text":"direct_differentiation_unsteady_SUPG(params::Dict{Symbol,Any})\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.direct_differentiation_unsteady_VMS-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.direct_differentiation_unsteady_VMS","text":"direct_differentiation_unsteady_VMS(params::Dict{Symbol,Any})\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.h_param-Tuple{Gridap.Geometry.Triangulation, Int64}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.h_param","text":"h_param(Ω::Triangulation, D::Int64)\n\nFor a given triangulation Ω it computes the cell size Area^12 D=2 Volume^13 D=3\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.primal_steady_SUPG-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.primal_steady_SUPG","text":"primal_steady_SUPG(params::Dict{Symbol,Any})\n\nNavier-Stokes SUPG stabilized set of equations\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.primal_steady_VMS-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.primal_steady_VMS","text":"primal_steady_VMS(params::Dict{Symbol,Any})\n\nNavier-Stokes VMS stabilized set of equations\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.primal_unsteady_SUPG-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.primal_unsteady_SUPG","text":"primal_steady_SUPG(params::Dict{Symbol,Any})\n\nNavier-Stokes unsteady SUPG stabilized set of equations\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.primal_unsteady_VMS-Tuple{Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.primal_unsteady_VMS","text":"primal_steady_VMS(params::Dict{Symbol,Any})\n\nNavier-Stokes unsteady VMS stabilized set of equations\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.τb-Tuple{Any, Any, Real, Real}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.τb","text":"τb(u, h, ν::Real, dt::Real)\n\nStabilization parameter for SUPG formulation. Janssens, B. (2014). Numerical modeling and experimental investigation of ﬁne particle coagulation and dispersion in dilute ﬂows.\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.τc-Tuple{Any, Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.τc","text":"τc(uu, params::Dict{Symbol,Any})\n\nStabilization parameter for VMS formulation. Bazilevs, Y., Calo, V. M., Cottrell, J. A., Hughes, T. J. R., Reali, A., & Scovazzi, G. (2007). Variational multiscale residual-based turbulence modeling for large eddy simulation of incompressible flows. Computer Methods in Applied Mechanics and Engineering, 197(1–4), 173–201. https://doi.org/10.1016/j.cma.2007.07.016\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.τm-Tuple{Any, Dict{Symbol, Any}}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.τm","text":"τm(uu, params::Dict{Symbol,Any})\n\nStabilization parameter for VMS formulation. Bazilevs, Y., Calo, V. M., Cottrell, J. A., Hughes, T. J. R., Reali, A., & Scovazzi, G. (2007). Variational multiscale residual-based turbulence modeling for large eddy simulation of incompressible flows. Computer Methods in Applied Mechanics and Engineering, 197(1–4), 173–201. https://doi.org/10.1016/j.cma.2007.07.016\n\n\n\n\n\n","category":"method"},{"location":"Equations/#IncompressibleAdjoint.Equations.τsu-Tuple{Any, Any, Real, Real}","page":"IncompressibleAdjoint.Equations","title":"IncompressibleAdjoint.Equations.τsu","text":"τsu(u, h, ν::Real, dt::Real)\n\nStabilization parameter for SUPG formulation. Janssens, B. (2014). Numerical modeling and experimental investigation of ﬁne particle coagulation and dispersion in dilute ﬂows.\n\n\n\n\n\n","category":"method"},{"location":"IncompressibleSolvers/","page":"IncompressibleAdjoint.IncompressibleSolvers","title":"IncompressibleAdjoint.IncompressibleSolvers","text":"CurrentModule = IncompressibleAdjoint.IncompressibleSolvers","category":"page"},{"location":"IncompressibleSolvers/#IncompressibleAdjoint.IncompressibleSolvers","page":"IncompressibleAdjoint.IncompressibleSolvers","title":"IncompressibleAdjoint.IncompressibleSolvers","text":"","category":"section"},{"location":"IncompressibleSolvers/","page":"IncompressibleAdjoint.IncompressibleSolvers","title":"IncompressibleAdjoint.IncompressibleSolvers","text":"Modules = [IncompressibleSolvers,]","category":"page"},{"location":"Utils/","page":"IncompressibleAdjoint.Utils","title":"IncompressibleAdjoint.Utils","text":"CurrentModule = IncompressibleAdjoint.Utils","category":"page"},{"location":"Utils/#IncompressibleAdjoint.Utils","page":"IncompressibleAdjoint.Utils","title":"IncompressibleAdjoint.Utils","text":"","category":"section"},{"location":"Utils/","page":"IncompressibleAdjoint.Utils","title":"IncompressibleAdjoint.Utils","text":"Modules = [Utils,]","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"See /examples","category":"page"},{"location":"#Manual","page":"Introduction","title":"Manual","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n  \"IncompressibleAdjoint.md\",\n  \"Equations.md\",\n  \"Geometry.md\",\n  \"IncompressibleSolvers.md\",\n  ]","category":"page"},{"location":"Geometry/","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry","text":"CurrentModule = IncompressibleAdjoint.Geometry","category":"page"},{"location":"Geometry/#IncompressibleAdjoint.Geometry","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry","text":"","category":"section"},{"location":"Geometry/","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry","text":"Modules = [Geometry,]","category":"page"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.CST","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.CST","text":"CST\n\nIt stores the weight for the upper and lower side of the airfoil\n\n\n\n\n\n","category":"type"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.ControlPoints","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.ControlPoints","text":"It stores the coordinate of the spline control points.\n\n\n\n\n\n","category":"type"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.ShiftUpdate","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.ShiftUpdate","text":"It stores the update for each degree of freedom of the the airfoil shape\n\n\n\n\n\n","category":"type"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.SplinePoints","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.SplinePoints","text":"It provides the arifoil points to Gmsh to create the mesh. In tag are stored the \"top\" or \"bottom\" string for each point to identify if it is on the top or bottom surface\n\n\n\n\n\n","category":"type"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.CST_NACA0012-Tuple{}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.CST_NACA0012","text":"CST_NACA0012()\n\nIt gives the CST of the NACA0012 airfoil.  t  is the leading thickness.t=0means sharp.t = 0.0126` is a common value.\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.ClassFunction-Tuple{Vector{Float64}, Real, Real}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.ClassFunction","text":"ClassFunction(x::Vector{Float64},N1::Real,N2::Real)\n\nCompute the class function     C = phi^N1 cdot(1-phi)^N2\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.NACA00-Tuple{Any}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.NACA00","text":"NACA00(x; t=0.12)\n\nAnalytical function for a NACA00XX airfoil. t=0.12 computes the NACA0012 and so on.\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.ShapeFunction-Tuple{Vector, Array{Float64}}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.ShapeFunction","text":"ShapeFunction(w::Vector,x::Array{Float64})\n\nCompute the shape function\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.circle-Tuple{Any}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.circle","text":"circle(x; diameter=1.0)\n\nIt return the equation of a circle with the center in [-diameter/2, 0.0].\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.compute_cst_error-Tuple{Any, Any}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.compute_cst_error","text":"compute_cst_error(w,p)\n\nCompute the error of approximation\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.compute_error-Tuple{Any, Any}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.compute_error","text":"compute_error(y0,y)\n\nCompute the error of approximation. y0 are the original points, y are the new ones.\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.create_msh-Tuple{IncompressibleAdjoint.Geometry.SplinePoints}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.create_msh","text":"create_msh(spline_points::SplinePoints; AoA=0.0, iter = 0, chord= 1.0, mesh_ref=1.0)\n\nFrom a set of spline_points it creates the .msh file. Incresing mesh_ref is increasing the mesh density.\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.get_idx_control_points-Tuple{Vector{Float64}, Any, Any}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.get_idx_control_points","text":"Given a vector of the position of control points in control_points_position it provides the indexes of the points on the boundary\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.get_radius_shift-Tuple{Gridap.TensorValues.VectorValue}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.get_radius_shift","text":"get_radius_shift(shift)\n\nGiven the shift, it computes the radius-influence of it.\n\n\n\n\n\n","category":"method"},{"location":"Geometry/#IncompressibleAdjoint.Geometry.split_w_wlwu-Tuple{Vector{Float64}, Tuple{Int64, Int64}}","page":"IncompressibleAdjoint.Geometry","title":"IncompressibleAdjoint.Geometry.split_w_wlwu","text":"split_w_wlwu(w::Vector{Float64},split_idx::Tuple{Int64})\n\nCreates 2 vector, one for wl and one for wu\n\n\n\n\n\n","category":"method"}]
}
